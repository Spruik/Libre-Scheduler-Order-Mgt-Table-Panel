{"version":3,"sources":["../src/utils.js"],"names":["getLineStartTime","line","l","split","target","_prodLineDetails","filter","site","area","production_line","length","start_time","queryProductionLineDetails","url","postgRestHost","get","then","res","catch","alert","e","appEvents","hostname","window","location","influxHost","post","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","handleResponse","onerror","send","readyState","status","JSON","parse","responseText","statusText","type","title","msg","emit","distinctElems","Array","from","Set","list","reconstruct","data","cols","columns","rows","result","forEach","obj","col","k","text","row","push"],"mappings":"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","file":"utils.js","sourcesContent":["import { appEvents } from 'app/core/core';\n\nconst hostname = window.location.hostname;\nexport const postgRestHost = 'http://' + hostname + ':5436/';\nexport const influxHost = 'http://' + hostname + ':8086/';\n\nlet _prodLineDetails;\n\nexport let post = (url, line) => {\n  return new Promise((resolve, reject) => {\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n    xhr.onreadystatechange = handleResponse;\n    xhr.onerror = e => reject(e);\n    xhr.send(line);\n\n    function handleResponse() {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          // console.log('200');\n          var res = JSON.parse(xhr.responseText);\n          resolve(res);\n        } else if (xhr.status === 204) {\n          // console.log('204');\n          res = xhr.responseText;\n          resolve(res);\n        } else {\n          reject(this.statusText);\n        }\n      }\n    }\n  });\n};\n\nexport let get = url => {\n  return new Promise((resolve, reject) => {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.onreadystatechange = handleResponse;\n    xhr.onerror = e => reject(e);\n    xhr.send();\n\n    function handleResponse() {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          var res = JSON.parse(xhr.responseText);\n          resolve(res);\n        } else {\n          reject(this.statusText);\n        }\n      }\n    }\n  });\n};\n\n/**\n * pass in the line, return the line's default start time\n * @param {*} line\n */\nexport function getLineStartTime(line) {\n  const l = line.split(' | ');\n  const target = _prodLineDetails.filter(\n    line =>\n      line.site === l[0] && line.area === l[1] && line.production_line === l[2]\n  );\n  if (target.length === 0) {\n    return '6:00:00';\n  } else {\n    if (target[0].start_time) {\n      return target[0].start_time;\n    } else {\n      return '6:00:00';\n    }\n  }\n}\n\n/**\n * It sends query to postgres db to get production line details and then\n * set the results global in this utils file for further uses.\n * Then execute the callback funtion when finished.\n */\nexport function queryProductionLineDetails() {\n  const url =\n    postgRestHost +\n    'equipment?site=not.is.null&area=not.is.null&production_line=not.is.null&equipment=is.null';\n  get(url)\n    .then(res => {\n      _prodLineDetails = res;\n    })\n    .catch(e => {\n      alert(\n        'error',\n        'Error',\n        'An error has occurred due to ' +\n          e +\n          ', please refresh the page and try again'\n      );\n    });\n}\n\nexport const alert = (type, title, msg) => {\n  appEvents.emit('alert-' + type, [title, msg]);\n};\n\nexport const distinctElems = list => {\n  return Array.from(new Set(list));\n};\n\nexport const reconstruct = data => {\n  if (data.length === 0) {\n    return data;\n  }\n\n  const cols = data[0].columns;\n  const rows = data[0].rows;\n\n  let result = [];\n  rows.forEach(row => {\n    let obj = {};\n    cols.forEach((col, k) => {\n      obj[col.text] = row[k];\n    });\n    result.push(obj);\n  });\n\n  return result;\n};\n"]}