{"version":3,"sources":["../src/influxHelper.js"],"names":["writeLineForUpdate","status","data","product_desc","split","join","line","writeTags","order_id","product_id","compl_qty","undefined","machine_state","scrap_qty","setpoint_rate","startTime","scheduled_start_datetime","endTime","scheduled_end_datetime","order_date","planned_changeover_time","production_line","order_qty","planned_rate","writeLineForUpdateWithChangingTime","currentStatus","product","orderId","date","productionLine","changeover","orderQty","plannedRate","writeLineForTimeUpdate","timeDiff","action","hasTurnedAround","roundedTimeDiff","roundTime","moment","subtract","valueOf","add","writeLineForUpdateWithRemovingTime","prod_id","prod_desc","timeText","getTimeText","duration","time","get","hour","mins","seconds","utils","writeUrl","influxHost"],"mappings":"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","file":"influxHelper.js","sourcesContent":["import * as utils from './utils'\nimport moment from 'moment'\n\nexport const writeUrl = utils.influxHost + 'write?db=smart_factory'\n\nlet hasTurnedAround = false\n\n/**\n * Expect the status string (Normally are: 'Ready' or 'Deleted')\n * Then changed the status in the line with anything else unchanged\n * @param {*} status\n */\nexport function writeLineForUpdate (status, data) {\n  // For influxdb tag keys, must add a forward slash \\ before each space\n  let product_desc = data.product_desc.split(' ').join('\\\\ ')\n\n  let line = writeTags(data.order_id, data.product_id, product_desc)\n  \n  if (data.compl_qty !== null && data.compl_qty !== undefined) {\n    line += 'compl_qty=' + data.compl_qty + ','\n  }\n  if (data.machine_state !== null && data.machine_state !== undefined) {\n    line += 'machine_state=\"' + data.machine_state + '\"' + ','\n  }\n  if (data.scrap_qty !== null && data.scrap_qty !== undefined) {\n    line += 'scrap_qty=' + data.scrap_qty + ','\n  }\n  if (data.setpoint_rate !== null && data.setpoint_rate !== undefined) {\n    line += 'setpoint_rate=' + data.setpoint_rate + ','\n  }\n\n  const startTime = data.scheduled_start_datetime ? data.scheduled_start_datetime : 0\n  const endTime = data.scheduled_end_datetime ? data.scheduled_end_datetime : 0\n  \n  line += 'order_state=\"' + status + '\"' + ','\n  line += 'order_date=\"' + data.order_date + '\"' + ','\n  line += 'planned_changeover_time=\"' + data.planned_changeover_time + '\"' + ','\n  line += 'scheduled_end_datetime=' + endTime + ','\n  line += 'scheduled_start_datetime=' + startTime + ','\n  line += 'production_line=\"' + data.production_line + '\"' + ','\n  line += 'order_qty=' + data.order_qty + ','\n  line += 'planned_rate=' + data.planned_rate\n\n//   console.log('writeLineForUpdate');\n//   console.log(line);\n  return line\n}\n\nexport function writeLineForUpdateWithChangingTime (data, currentStatus, startTime, endTime) {\n  const product_id = data.product.split(' | ')[0]\n  let product_desc = data.product.split(' | ')[1]\n\n  // For influxdb tag keys, must add a forward slash \\ before each space\n  product_desc = product_desc.split(' ').join('\\\\ ')\n\n  let line = writeTags(data.orderId, product_id, product_desc)\n  line += 'order_state=\"' + currentStatus + '\"' + ','\n  line += 'order_date=\"' + data.date + '\"' + ','\n  line += 'production_line=\"' + data.productionLine + '\"' + ','\n  line += 'planned_changeover_time=\"' + data.changeover + '\"' + ','\n  line += 'scheduled_end_datetime=' + endTime + ','\n  line += 'scheduled_start_datetime=' + startTime + ','\n  line += 'order_qty=' + data.orderQty + ','\n  line += 'setpoint_rate=' + 0 + ','\n  line += 'planned_rate=' + data.plannedRate\n\n//   console.log('writeLineForUpdateWithChangingTime');\n//   console.log(line);\n  return line\n}\n\n/**\n * Prepare a line for influxdb request\n * @param {{}} data Expecting Object : The order data that is to be updated\n * @param {moment} timeDiff Expecting (Moment Duration Object): The time difference that this order is going to add / subtract\n * @param {string} action Expecting String : The action (add / subtract), example -> 'subtract'\n */\nexport function writeLineForTimeUpdate (data, timeDiff, action) {\n\n  hasTurnedAround = false\n  const roundedTimeDiff = roundTime(timeDiff)\n  \n  //if the roundedTimeDiff has been turned around from negative to positive\n  //set 'subtract' to add , or 'add' to subtract to also turn the operators around.\n  if (action === 'subtract') {\n    if (hasTurnedAround) {\n      action = 'add'\n    }\n  }else {\n    if (hasTurnedAround) {\n      action = 'subtract'\n    }\n  }\n\n  let endTime = action === 'subtract'\n      ? (endTime = moment(data.scheduled_end_datetime).subtract(roundedTimeDiff).valueOf())\n      : (endTime = moment(data.scheduled_end_datetime).add(roundedTimeDiff).valueOf())\n\n  let startTime = action === 'subtract'\n      ? (startTime = moment(data.scheduled_start_datetime).subtract(roundedTimeDiff).valueOf())\n      : (startTime = moment(data.scheduled_start_datetime).add(roundedTimeDiff).valueOf())\n\n  // For influxdb tag keys, must add a forward slash \\ before each space\n  let product_desc = data.product_desc.split(' ').join('\\\\ ')\n\n  let line = writeTags(data.order_id, data.product_id, product_desc)\n\n  if (data.compl_qty !== null && data.compl_qty !== undefined) {\n    line += 'compl_qty=' + data.compl_qty + ','\n  }\n  if (data.machine_state !== null && data.machine_state !== undefined) {\n    line += 'machine_state=\"' + data.machine_state + '\"' + ','\n  }\n  if (data.scrap_qty !== null && data.scrap_qty !== undefined) {\n    line += 'scrap_qty=' + data.scrap_qty + ','\n  }\n  if (data.setpoint_rate !== null && data.setpoint_rate !== undefined) {\n    line += 'setpoint_rate=' + data.setpoint_rate + ','\n  }\n\n  line += 'order_state=\"' + data.status + '\"' + ','\n  line += 'order_date=\"' + data.order_date + '\"' + ','\n  line += 'planned_changeover_time=\"' + data.planned_changeover_time + '\"' + ','\n  line += 'production_line=\"' + data.production_line + '\"' + ','\n  line += 'order_qty=' + data.order_qty + ','\n  line += 'scheduled_end_datetime=' + endTime + ','\n  line += 'scheduled_start_datetime=' + startTime + ','\n  line += 'planned_rate=' + data.planned_rate\n\n//   console.log('writeLineForTimeUpdate');\n//   console.log(line);\n  return line\n}\n\nexport function writeLineForUpdateWithRemovingTime (data, currentStatus) {\n  const product_id = data.product.split(' | ')[0]\n  let product_desc = data.product.split(' | ')[1]\n\n  // For influxdb tag keys, must add a forward slash \\ before each space\n  product_desc = product_desc.split(' ').join('\\\\ ')\n\n  let line = writeTags(data.orderId, product_id, product_desc)\n  line += 'order_state=\"' + currentStatus + '\"' + ','\n  line += 'order_date=\"' + data.date + '\"' + ','\n  line += 'production_line=\"' + data.productionLine + '\"' + ','\n  line += 'planned_changeover_time=\"' + data.changeover + '\"' + ','\n  line += 'order_qty=' + data.orderQty + ','\n  line += 'setpoint_rate=' + 0 + ','\n  line += 'planned_rate=' + data.plannedRate\n\n//   console.log('writeLineForUpdateWithRemovingTime');\n//   console.log(line);\n  return line\n}\n\nfunction writeTags(order_id, prod_id, prod_desc){\n  return 'OrderPerformance,order_id=' + order_id +\n  ',product_id=' + prod_id +\n  ',product_desc=' + prod_desc + ' '\n}\n\n  /**\n * Take a moment duration obj, take this obj's hours mins and seconds to make a new moment duration\n * The purpose is to make a new duration with rounded milsec that is easier for calculation\n * Return the new duration with rounded milsec\n * @param {moment duration obj} timeDiff The moment duration obj\n */\nfunction roundTime(timeDiff){\n  const timeText = getTimeText(timeDiff)\n  return moment.duration(timeText, 'H:mm:ss')\n}\n\n/**\n * Take a moment duration obj, return a string text of 'h:mm:ss' of the duration\n * If the duration is negative, turn all the negative to positive and set 'hasTurnedAround' to true\n * @param {moment duration obj} time The moment duration obj\n */\nfunction getTimeText(time){\n  if (time.get('h') < 0 || time.get('minutes') < 0 || time.get('seconds') < 0) {\n    hasTurnedAround = true\n  }\n\n  const hour = time.get('h') < 0 ? time.get('h') * -1 : time.get('h')\n  const mins = time.get('minutes') < 0 ? time.get('minutes') * -1 : time.get('minutes')\n  const seconds = time.get('seconds') < 0 ? time.get('seconds') * -1 : time.get('seconds')\n  \n  return hour + ':' + mins + ':' + seconds\n}"]}