{"version":3,"sources":["../src/action_options_form_ctrl.js"],"names":["showActionOptionsForm","productionLine","orderId","productDesc","productId","tags","prodLine","prodDesc","prodId","_allData","tableCtrl","allData","getRowData","then","init","res","catch","utils","alert","e","_rowData","status","toLowerCase","cons","STATE_PLAN","STATE_READY","appEvents","emit","src","modalClass","model","removeListeners","addListeners","Promise","resolve","reject","data","filter","order","production_line","order_id","product_id","length","url","postgRestHost","get","_orderStates","$","document","on","target","id","showOrderEditingForm","closeForm","updateOrder","STATE_DELETED","off","action","line","writeInfluxLine","deleteCurrentAndUpdateAffectOrders","post","influx","writeUrl","refreshDashboard","promises","affectedOrders","scheduled_start_datetime","scheduled_end_datetime","order_date","deletingOrderDurationHour","moment","duration","order_qty","planned_rate","deletingOrderChangeover","planned_changeover_time","deletingOrderTotalDur","add","forEach","writeLineForTimeUpdate","push","all","compl_qty","undefined","machine_state","getRid","scrap_qty","setpoint_rate","product_desc","x","split","join","trigger"],"mappings":"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","file":"action_options_form_ctrl.js","sourcesContent":["import { showOrderEditingForm } from './order_form_ctrl';\nimport { appEvents } from 'app/core/core';\nimport * as utils from './utils';\nimport * as tableCtrl from './table_ctrl';\nimport * as influx from './influxHelper';\nimport * as cons from './constants';\nimport moment from 'moment';\n\nlet _rowData;\nlet _allData;\nlet _orderStates;\n\nconst closeForm = () => {\n  $('a#order-mgt-scheduler-action-option-close-btn').trigger('click');\n};\n\n/**\n * Expect four params which are the tags values and are for querying the record data\n * Show the action options form once the query is finished\n * Remove listener and then add listener, which is to prevent listeners duplication\n * @param {*} productionLine\n * @param {*} orderId\n * @param {*} productDesc\n * @param {*} productId\n */\nfunction showActionOptionsForm(\n  productionLine,\n  orderId,\n  productDesc,\n  productId\n) {\n  //get data\n  let tags = {\n    prodLine: productionLine,\n    orderId: orderId,\n    prodDesc: productDesc,\n    prodId: productId\n  };\n  _allData = tableCtrl.allData();\n  getRowData(_allData, tags)\n    .then(res => {\n      init(res);\n    })\n    .catch(e => {\n      utils.alert('error', 'Error', e);\n    });\n}\n\nfunction init(res) {\n  _rowData = res;\n  if (\n    _rowData.status.toLowerCase() !== cons.STATE_PLAN &&\n    _rowData.status.toLowerCase() !== cons.STATE_READY\n  ) {\n    utils.alert(\n      'warning',\n      'Warning',\n      'This order is ' +\n        _rowData.status +\n        ' and is no longer available for editing'\n    );\n    return;\n  }\n\n  appEvents.emit('show-modal', {\n    src:\n      'public/plugins/smart-factory-scheduler-order-mgt-table-panel/partials/action_options.html',\n    modalClass: 'confirm-modal',\n    model: {}\n  });\n\n  removeListeners();\n  addListeners();\n}\n\n/**\n * Use the tags to filter out the clicked order data from all data\n * And return it\n * @param {*} allData All orders\n * @param {*} tags The tags of the order that is clicked\n */\nfunction getRowData(allData, tags) {\n  return new Promise((resolve, reject) => {\n    const data = allData.filter(\n      order =>\n        order.production_line === tags.prodLine &&\n        order.order_id === tags.orderId &&\n        order.product_id === tags.prodId\n    )[0];\n    if (data.length === 0) {\n      reject('Order not found');\n    } else {\n      const url = `${utils.postgRestHost}order_state`;\n      utils\n        .get(url)\n        .then(res => {\n          _orderStates = res;\n          resolve(data);\n        })\n        .catch(e => {\n          reject(`error due to order state configuration`);\n        });\n    }\n  });\n}\n\n/**\n * Add listener for the action selection\n * If edit clicked, go to the edit form with the current record data\n * If realease clicked, change record status to 'Ready'\n * If delete clicked, change record status to 'Deleted'\n */\nfunction addListeners() {\n  $(document).on(\n    'click',\n    'input[type=\"radio\"][name=\"order-mgt-scheduler-actions-radio\"]',\n    e => {\n      if (e.target.id === 'edit') {\n        showOrderEditingForm(_rowData, _allData);\n      } else if (e.target.id === 'release') {\n        if (_rowData.status.toLowerCase() === cons.STATE_READY) {\n          utils.alert('warning', 'Warning', 'Order has already been released');\n          closeForm();\n        } else {\n          updateOrder(cons.STATE_READY);\n        }\n      } else if (e.target.id === 'delete') {\n        updateOrder(cons.STATE_DELETED);\n      }\n    }\n  );\n}\n\n/**\n * Remove listener for the action selection\n */\nfunction removeListeners() {\n  $(document).off(\n    'click',\n    'input[type=\"radio\"][name=\"order-mgt-scheduler-actions-radio\"]'\n  );\n}\n\n/**\n * Expect the action string (Normally are: 'Ready' or 'Deleted')\n * Use the action var passed in to write the line\n * Then update the record\n * Stop and prompt error if it fails\n * @param {*} action\n */\nfunction updateOrder(action) {\n  const line = writeInfluxLine(action);\n  if (action.toLowerCase() === cons.STATE_DELETED) {\n    deleteCurrentAndUpdateAffectOrders(line);\n  } else {\n    utils\n      .post(influx.writeUrl, line)\n      .then(res => {\n        utils.alert('success', 'Success', 'Order has been marked as ' + action);\n        closeForm();\n        tableCtrl.refreshDashboard();\n      })\n      .catch(e => {\n        utils.alert(\n          'error',\n          'Database Error',\n          'An error occurred while writing data to the influxdb : ' +\n            e +\n            'please check the basebase connection'\n        );\n        closeForm();\n      });\n  }\n}\n\nfunction deleteCurrentAndUpdateAffectOrders(line) {\n  //create promises array and put the 'delete current order request' into it first\n  let promises = [utils.post(influx.writeUrl, line)];\n\n  //get all orders data for further filtering\n  const allData = tableCtrl.allData();\n\n  //filter affected orders using all orders data\n  //affected orders = order.startTime >= thisOrder.endtime && in the same line && with the same date.\n  const affectedOrders = allData.filter(\n    order =>\n      order.scheduled_start_datetime >= _rowData.scheduled_end_datetime &&\n      order.production_line === _rowData.production_line &&\n      order.order_date === _rowData.order_date\n  );\n\n  //work out thisOrder's total duration, which = its duration + its changeover duration\n  const deletingOrderDurationHour = moment.duration(\n    _rowData.order_qty / (_rowData.planned_rate * 60),\n    'hours'\n  );\n  const deletingOrderChangeover = moment.duration(\n    _rowData.planned_changeover_time,\n    'H:mm:ss'\n  );\n  const deletingOrderTotalDur = deletingOrderDurationHour.add(\n    deletingOrderChangeover\n  );\n\n  //loop affected orders, order's starttime and endtime should both subtract the total duration worked out\n  affectedOrders.forEach(order => {\n    const line = influx.writeLineForTimeUpdate(\n      order,\n      deletingOrderTotalDur,\n      'subtract'\n    );\n    promises.push(utils.post(influx.writeUrl, line));\n  });\n\n  Promise.all(promises)\n    .then(() => {\n      utils.alert('success', 'Success', 'Order has been marked as Deleted');\n      closeForm();\n      tableCtrl.refreshDashboard();\n    })\n    .catch(e => {\n      utils.alert(\n        'error',\n        'Database Error',\n        'An error occurred while deleting the order : ' + e\n      );\n      closeForm();\n    });\n}\n\n/**\n * Expect the status string (Normally are: 'Ready' or 'Deleted')\n * Then changed the status in the line with anything else unchanged\n * @param {*} status\n */\nfunction writeInfluxLine(status) {\n  //For influxdb tag keys, must add a forward slash \\ before each space\n  // let product_desc = _rowData.product_desc.split(' ').join('\\\\ ')\n\n  let line = `OrderPerformance,order_id=${_rowData.order_id},product_id=${_rowData.product_id} `;\n\n  if (_rowData.compl_qty !== null && _rowData.compl_qty !== undefined) {\n    line += 'compl_qty=' + _rowData.compl_qty + ',';\n  }\n  if (_rowData.machine_state !== null && _rowData.machine_state !== undefined) {\n    line += 'machine_state=\"' + getRid(_rowData.machine_state) + '\"' + ',';\n  }\n  if (_rowData.scrap_qty !== null && _rowData.scrap_qty !== undefined) {\n    line += 'scrap_qty=' + _rowData.scrap_qty + ',';\n  }\n  if (_rowData.setpoint_rate !== null && _rowData.setpoint_rate !== undefined) {\n    line += 'setpoint_rate=' + _rowData.setpoint_rate + ',';\n  }\n\n  if (\n    _rowData.scheduled_end_datetime !== null &&\n    _rowData.scheduled_end_datetime !== undefined\n  ) {\n    line += 'scheduled_end_datetime=' + _rowData.scheduled_end_datetime + ',';\n    line +=\n      'scheduled_start_datetime=' + _rowData.scheduled_start_datetime + ',';\n  }\n\n  line += 'order_state=\"' + getRid(status) + '\"' + ',';\n  line += 'product_desc=\"' + getRid(_rowData.product_desc) + '\"' + ',';\n  line += 'order_date=\"' + _rowData.order_date + '\"' + ',';\n  line +=\n    'planned_changeover_time=\"' + _rowData.planned_changeover_time + '\"' + ',';\n  line += 'production_line=\"' + getRid(_rowData.production_line) + '\"' + ',';\n  line += 'order_qty=' + _rowData.order_qty + ',';\n  line += 'planned_rate=' + _rowData.planned_rate;\n\n  //   console.log('writeInfluxLine');\n  //   console.log(line);\n  return line;\n}\n\nfunction getRid(x) {\n  return x.split('\"').join('\\\\\"');\n}\n\nexport { showActionOptionsForm };\n"]}