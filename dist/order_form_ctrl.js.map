{"version":3,"sources":["../src/order_form_ctrl.js"],"names":["showOrderEditingForm","data","alldata","_rowData","_allData","getProductsAndEquipments","callback","appEvents","emit","src","modalClass","model","tryCatchCount","tryCatchCtrl","removeListeners","addListeners","setTimeout","startCtrl","e","$","trigger","utils","alert","enableInstantSearch","products","equipment","datepicker","orientation","todayBtn","format","autoclose","timepicker","showMeridian","showSeconds","maxHours","minuteStep","secondStep","defaultTime","icons","up","down","prefillData","productsUrl","postgRestHost","equipmentsUrl","stateUrl","get","then","res","_orderStates","catch","val","order_id","order_qty","production_line","product_id","product_desc","order_date","planned_rate","planned_changeover_time","updateDuration","document","on","serializeArray","submitOrder","value","off","qty","rate","durationHrs","Number","parseFloat","toFixed","momentDuration","moment","duration","durationText","getDurationText","month","days","hrs","mins","text","inputValues","orderId","orderQty","productionLine","product","date","plannedRate","changeover","scheduled_end_datetime","scheduled_start_datetime","isValueValid","updateOrder","ordersBeingAffected","getOrdersBeingAffect","_ordersBeingAffected","isLineHavingSpareTimeForTheDay","updateOldAndNewOrders","line","influx","writeLineForUpdate","cons","STATE_REPLACED","post","writeUrl","isLineChanged","updateWithRemoving","isDateChanged","updateWithChanging","closeForm","originalStartTime","changeoverDiff","subtract","startTime","add","endTime","oldTotal","newTotal","difference","writeLineForUpdateWithChangingTime","status","valueOf","updateAffectedOrders","getInitState","filter","x","is_init_state","state","initState","writeLineForUpdateWithRemovingTime","length","getDiff","tableCtrl","refreshDashboard","promises","forEach","writeLineForTimeUpdate","order","prom","push","Promise","all","diff","allData","rowData","affectedOrders","id","targetDayStartTime","getLineStartTime","targetDayStartTimeText","nextDayStartTime","totalDur","isSameOrBefore","all_end_times","map","maxEndTime","Math","max","ordersInOriginalLineAndDate","hasTagsChanged","inputs","split","dateRegExp","RegExp","prodList","reduce","arr","p","str","productionLineList","equ","site","area","distinctElems","indexOf","test","bootstrap_datepicker","bootstrap_timepicker","_orderDurationHours"],"mappings":"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","file":"order_form_ctrl.js","sourcesContent":["import * as utils from './utils';\nimport * as cons from './constants';\nimport moment from 'moment';\nimport { appEvents } from 'app/core/core';\nimport { enableInstantSearch } from './instant_search_ctrl';\nimport * as bootstrap_datepicker from './libs/bootstrap-datepicker';\nimport * as bootstrap_timepicker from './libs/bootstrap-timepicker';\nimport * as influx from './influxHelper';\nimport * as tableCtrl from './table_ctrl';\n\nconst closeForm = () =>\n  $('#order-mgt-scheduler-form-close-btn').trigger('click');\n\nlet products;\nlet equipment;\nlet _rowData;\nlet _ordersBeingAffected;\nlet _allData;\nlet tryCatchCount = 1;\nlet _orderDurationHours;\nlet _orderStates;\n\n/**\n * This function is the entry point to show the order editing form\n * It accepts one param, with is called 'data'\n * This 'data' is empty when the user clicks the create icon to create a new order\n * This 'data' is not empty when the user clicks the row to edit the order, and the form will be pre-fill based on the data passed in\n * @param {*} data\n */\nfunction showOrderEditingForm(data, alldata) {\n  _rowData = data;\n  _allData = alldata;\n\n  getProductsAndEquipments(callback);\n\n  function callback() {\n    appEvents.emit('show-modal', {\n      src:\n        'public/plugins/smart-factory-scheduler-order-mgt-table-panel/partials/order_form.html',\n      modalClass: 'confirm-modal',\n      model: {}\n    });\n\n    tryCatchCount = 1;\n    tryCatchCtrl();\n\n    removeListeners();\n    addListeners();\n  }\n}\n\n/**\n * Try enable the insatnt search function and the datepicker\n * Re-try if it fails\n * Stop and prompt error if it fails more than 15 times\n */\nfunction tryCatchCtrl() {\n  setTimeout(() => {\n    try {\n      startCtrl();\n    } catch (e) {\n      if (tryCatchCount < 15) {\n        tryCatchCtrl();\n        tryCatchCount++;\n      } else {\n        $('#order-mgt-scheduler-form-cancelBtn').trigger('click');\n        utils.alert(\n          'error',\n          'Error',\n          'Form initialisation failed, please try agian' + e\n        );\n      }\n    }\n  }, 200);\n}\n\n/**\n * Enable instant search function and the datepicker\n */\nfunction startCtrl() {\n  enableInstantSearch(products, equipment);\n  $('#datepicker').datepicker({\n    orientation: 'top',\n    todayBtn: 'linked',\n    format: 'yyyy-mm-dd',\n    autoclose: true\n  });\n\n  $('#changeover-minutes-picker').timepicker({\n    showMeridian: false,\n    showSeconds: true,\n    maxHours: 100,\n    minuteStep: 1,\n    secondStep: 1,\n    defaultTime: '00:00:00',\n    icons: {\n      up: 'fa fa-chevron-up',\n      down: 'fa fa-chevron-down'\n    }\n  });\n\n  prefillData();\n}\n\n/**\n * Get the product list and production line list from postgresql\n * Call the callback fn passed in once it is finished\n * Stop and prompt error when it fails\n * @param {fn} callback\n */\nfunction getProductsAndEquipments(callback) {\n  let productsUrl = utils.postgRestHost + 'product';\n  let equipmentsUrl =\n    utils.postgRestHost + 'equipment?production_line=not.is.null';\n  const stateUrl = `${utils.postgRestHost}order_state`;\n\n  utils\n    .get(productsUrl)\n    .then(res => {\n      products = res;\n      utils\n        .get(equipmentsUrl)\n        .then(res => {\n          equipment = res;\n          utils\n            .get(stateUrl)\n            .then(res => {\n              _orderStates = res;\n              callback();\n            })\n            .catch(e => {\n              utils.alert(\n                'error',\n                'Error',\n                'An error occurred while fetching data from the postgresql : ' +\n                  e +\n                  'please check the basebase connection'\n              );\n            });\n        })\n        .catch(e => {\n          utils.alert(\n            'error',\n            'Error',\n            'An error occurred while fetching data from the postgresql : ' +\n              e +\n              'please check the basebase connection'\n          );\n        });\n    })\n    .catch(e => {\n      utils.alert(\n        'error',\n        'Error',\n        'An error occurred while fetching data from the postgresql : ' +\n          e +\n          'please check the basebase connection'\n      );\n    });\n}\n\n/**\n * Pre-fiil the information when it comes with data (When the user clicks the row)\n */\nfunction prefillData() {\n  if (_rowData) {\n    $('input.ord-mgt-datalist-input#order-id').val(_rowData.order_id);\n    $('input.ord-mgt-datalist-input#order-qty').val(_rowData.order_qty);\n    $('input.ord-mgt-datalist-input#datalist-input-production-line').val(\n      _rowData.production_line\n    );\n    $('input.ord-mgt-datalist-input#datalist-input-products').val(\n      _rowData.product_id + ' | ' + _rowData.product_desc\n    );\n    $('input.ord-mgt-datalist-input#datepicker').val(_rowData.order_date);\n    $('input.ord-mgt-datalist-input#planned-rate').val(_rowData.planned_rate);\n    $('input.ord-mgt-datalist-input#changeover-minutes-picker').val(\n      _rowData.planned_changeover_time\n    );\n    updateDuration(_rowData.order_qty, _rowData.planned_rate);\n  }\n}\n\n/**\n * Add click event listener for the submit btn\n */\nfunction addListeners() {\n  $(document).on('click', 'button#order-mgt-scheduler-form-submitBtn', e => {\n    let data = $('form#order-mgt-scheduler-form').serializeArray();\n    submitOrder(data);\n  });\n\n  $(document).on('input', 'input#planned-rate, input#order-qty', e => {\n    let data = $('form#order-mgt-scheduler-form').serializeArray();\n    updateDuration(data[1].value, data[5].value);\n  });\n}\n\n/**\n * Remove the click event listner for the submit btn\n */\nfunction removeListeners() {\n  $(document).off('click', 'button#order-mgt-scheduler-form-submitBtn');\n  $(document).off('input', 'input#planned-rate, input#order-qty');\n}\n\nfunction updateDuration(qty, rate) {\n  if (qty !== '' && rate !== '') {\n    let durationHrs =\n      Number(parseFloat(qty).toFixed(2)) /\n      Number((parseFloat(rate) * 60).toFixed(2));\n    let momentDuration = moment.duration(durationHrs, 'hours');\n\n    let durationText = getDurationText(momentDuration);\n\n    $('input.ord-mgt-datalist-input#duration').val(durationText);\n  } else {\n    $('input.ord-mgt-datalist-input#duration').val('');\n  }\n}\n\nfunction getDurationText(momentDuration) {\n  let month = momentDuration.get('month');\n  let days = momentDuration.get('d');\n  let hrs = momentDuration.get('h');\n  let mins = momentDuration.get('minute');\n  let text = 'under 1 minute';\n\n  if (month > 0) {\n    return 'Over a month!';\n  }\n\n  if (days !== 0) {\n    hrs += days * 24;\n  }\n\n  if (hrs !== 0 && mins !== 0) {\n    text = hrs + ' hour(s) & ' + mins + ' minute(s)';\n  } else if (hrs !== 0 && mins === 0) {\n    text = hrs + ' hour(s)';\n  } else if (hrs === 0 && mins !== 0) {\n    text = mins + ' minute(s)';\n  }\n\n  return text;\n}\n\n/**\n * Expect the form data and then check if the form data is valid\n * If data is valid, check if the tags are changed, simply update the record if tags are unchanged\n * Or create a new record with the validated form data then update the old record's status as 'Replaced'\n * @param {*} data\n */\nfunction submitOrder(data) {\n  const inputValues = {\n    orderId: data[0].value,\n    orderQty: data[1].value,\n    productionLine: data[2].value,\n    product: data[3].value,\n    date: data[4].value,\n    plannedRate: data[5].value,\n    duration: data[6].value,\n    changeover: data[7].value,\n    scheduled_end_datetime: _rowData.scheduled_start_datetime,\n    scheduled_end_datetime: _rowData.scheduled_end_datetime\n  };\n\n  if (isValueValid(inputValues)) {\n    updateOrder(inputValues);\n  }\n}\n\nfunction updateOrder(inputValues) {\n  //the orders that are in the original line that this order was in and that are being affected because this order changes line\n  const ordersBeingAffected = getOrdersBeingAffect(_allData, inputValues);\n  _ordersBeingAffected = ordersBeingAffected;\n  if (!isLineHavingSpareTimeForTheDay(_allData, inputValues, _rowData)) {\n    utils.alert(\n      'warning',\n      'Warning',\n      \"There is no spare space for this order to fit in this date's schedule\"\n    );\n    return;\n  }\n\n  // if (hasTagsChanged(inputValues)) {\n  updateOldAndNewOrders(inputValues);\n  // }else {\n  //   //in here, check if the line has changed, if yes, meaning that the order is going to another line\n  //   //so also update all affectingOrders(orders that are in the original line and that are after this order)\n  //   if (isLineChanged(inputValues)) {\n  //     //save the order directly with removing its starttime and endtime to let the initialiser to init it again\n  //     //coz it is changing line, so just simply remove the start time and end time\n  //     updateWithRemoving(inputValues)\n  //   }else{\n  //     //save the order directly with changing its starttime and endtime\n  //     if (isDateChanged(inputValues)) {\n  //       updateWithRemoving(inputValues)\n  //     }else{\n  //       updateWithChanging(inputValues)\n  //     }\n  //   }\n  // }\n}\n\nfunction updateOldAndNewOrders(inputValues) {\n  if (_rowData) {\n    const line = influx.writeLineForUpdate(cons.STATE_REPLACED, _rowData);\n    utils\n      .post(influx.writeUrl, line)\n      .then(res => {\n        //save the new order directly with removing its starttime and endtime to let the initialiser to init it again\n        //becuase this is the first\n        if (isLineChanged(inputValues)) {\n          updateWithRemoving(inputValues);\n        } else {\n          if (isDateChanged(inputValues)) {\n            updateWithRemoving(inputValues);\n          } else {\n            updateWithChanging(inputValues);\n          }\n        }\n      })\n      .catch(e => {\n        closeForm();\n        utils.alert(\n          'error',\n          'Error',\n          'An error occurred when updated the order : ' + e\n        );\n      });\n  } else {\n    //if there is no _rowdata, meaning that it is being created, so no need to update\n    if (isLineChanged(inputValues)) {\n      updateWithRemoving(inputValues);\n    } else {\n      if (isDateChanged(inputValues)) {\n        updateWithRemoving(inputValues);\n      } else {\n        updateWithChanging(inputValues);\n      }\n    }\n  }\n}\n\nfunction isDateChanged(inputValues) {\n  return _rowData.order_date !== inputValues.date;\n}\n\n/**\n * Take the user input, send request to change the current order to be what the user has entered in the edition form\n * It normally changes the current order's starttime and endtime because the order is being changed\n * @param {*} inputValues User input\n */\nfunction updateWithChanging(inputValues) {\n  const originalStartTime = _rowData.scheduled_start_datetime;\n  //The difference between the original changeover and the edited changeover\n  const changeoverDiff = moment\n    .duration(inputValues.changeover)\n    .subtract(moment.duration(_rowData.planned_changeover_time));\n  const startTime = moment(originalStartTime).add(changeoverDiff);\n  const duration = moment.duration(\n    inputValues.orderQty / (inputValues.plannedRate * 60),\n    'hours'\n  );\n  const endTime = moment(originalStartTime)\n    .add(changeoverDiff)\n    .add(duration);\n\n  //calc the difference between the edited order's total duration and the original order's total duration\n  //so that all the affected orders know how many to add/subtract\n  const oldTotal = moment\n    .duration(_rowData.order_qty / (_rowData.planned_rate * 60), 'hours')\n    .add(moment.duration(_rowData.planned_changeover_time));\n\n  const newTotal = duration.add(moment.duration(inputValues.changeover));\n  const difference = oldTotal.subtract(newTotal);\n\n  const line = influx.writeLineForUpdateWithChangingTime(\n    inputValues,\n    _rowData.status,\n    startTime.valueOf(),\n    endTime.valueOf()\n  );\n  utils\n    .post(influx.writeUrl, line)\n    .then(res => {\n      updateAffectedOrders(inputValues, difference);\n    })\n    .catch(e => {\n      closeForm();\n      utils.alert(\n        'error',\n        'Error',\n        'An error occurred when updated the order : ' + e\n      );\n    });\n}\n\nfunction getInitState() {\n  return _orderStates.filter(x => x.is_init_state)[0].state;\n}\n\n/**\n * Take the user input, send request to change the current order to be what the user has entered in the edition form\n * It will remove the order's start time and end time because it is changing line so that no order will be affected in the changing line\n * and so that the start time and end time can be removed, and then let the initialiser to init the time again.\n * @param {*} inputValues The user input\n */\nfunction updateWithRemoving(inputValues) {\n  const initState = getInitState();\n  if (!initState) {\n    utils.alert(\n      'error',\n      'Error',\n      'Cannot find Initial State from the Order State Config Table'\n    );\n    return;\n  }\n  const line = influx.writeLineForUpdateWithRemovingTime(\n    inputValues,\n    _rowData ? _rowData.status : initState\n  );\n\n  utils\n    .post(influx.writeUrl, line)\n    .then(res => {\n      if (_ordersBeingAffected.length > 0) {\n        const difference = getDiff(inputValues);\n        updateAffectedOrders(inputValues, difference);\n      } else {\n        closeForm();\n        utils.alert(\n          'success',\n          'Successful',\n          'Order has been successfully updated'\n        );\n        tableCtrl.refreshDashboard();\n      }\n    })\n    .catch(e => {\n      closeForm();\n      utils.alert(\n        'error',\n        'Error',\n        'An error occurred when updated the order : ' + e\n      );\n    });\n}\n\n/**\n * Take the time difference, send request to add/subtract the time diff for all the affected orders due to -\n * the edited order being changed or removed from the current line and date\n * @param {*} inputValues The user input\n * @param {*} difference The time difference that all affected orders will need to add/subtract\n */\nfunction updateAffectedOrders(inputValues, difference) {\n  let promises = [];\n  _ordersBeingAffected.forEach(order => {\n    const line = influx.writeLineForTimeUpdate(order, difference, 'subtract');\n    const prom = utils.post(influx.writeUrl, line);\n    promises.push(prom);\n  });\n  Promise.all(promises)\n    .then(res => {\n      closeForm();\n      utils.alert(\n        'success',\n        'Successful',\n        'Order has been successfully updated'\n      );\n      tableCtrl.refreshDashboard();\n    })\n    .catch(e => {\n      closeForm();\n      utils.alert(\n        'error',\n        'Error',\n        'An error occurred when updated the order : ' + e\n      );\n    });\n}\n\n/**\n * Take inputValues and find the qty and rate to calc the duration\n * then return duration + changeover duration\n * @param {*} inputValues User input for the form\n */\nfunction getDiff(inputValues) {\n  let diff;\n  const duration = moment.duration(\n    inputValues.orderQty / (inputValues.plannedRate * 60),\n    'hours'\n  );\n  const changeover = moment.duration(inputValues.changeover, 'H:mm:ss');\n  diff = duration.add(changeover);\n  return diff;\n}\n\nfunction isLineHavingSpareTimeForTheDay(allData, inputValues, rowData) {\n  //all orders in the targeting line (except the editing order itself (if line not changed))\n  let affectedOrders = allData.filter(\n    order =>\n      order.production_line === inputValues.productionLine &&\n      order.order_date === inputValues.date\n  );\n  const id = rowData ? rowData.order_id : inputValues.orderId;\n  affectedOrders = affectedOrders.filter(order => order.order_id !== id);\n  //find the line's default start time and then plus next day productionLine\n  const targetDayStartTime = moment(\n    moment(inputValues.date, 'YYYY-MM-DD').format('YYYY-MM-DD') +\n      ' ' +\n      utils.getLineStartTime(\n        rowData ? rowData.production_line : inputValues.productionLine\n      ),\n    'YYYY-MM-DD H:mm:ss'\n  );\n  const targetDayStartTimeText = targetDayStartTime.format(\n    'YYYY-MM-DD H:mm:ss'\n  );\n  const nextDayStartTime = moment(\n    targetDayStartTimeText,\n    'YYYY-MM-DD H:mm:ss'\n  ).add(1, 'days');\n  //calc edited order's duration\n  const duration = moment.duration(\n    inputValues.orderQty / (inputValues.plannedRate * 60),\n    'hours'\n  );\n  const changeover = moment.duration(inputValues.changeover, 'H:mm:ss');\n  const totalDur = duration.add(changeover);\n\n  //if no affected orders, see if target dat start time + totaldur <= nextdatstarttime\n  if (affectedOrders.length === 0) {\n    return targetDayStartTime.add(totalDur).isSameOrBefore(nextDayStartTime);\n  }\n  //get the max end time\n  const all_end_times = affectedOrders.map(\n    order => order.scheduled_end_datetime\n  );\n  const maxEndTime = moment(Math.max(...all_end_times));\n  maxEndTime.add(totalDur);\n  return maxEndTime.isSameOrBefore(nextDayStartTime);\n}\n\n/**\n * get alldata and the user input to filter all affected orders.\n * These orders will be the ones that are in the original line with the same date.\n * @param {*} allData All the orders that is being passed in and displayed in this panel\n * @param {*} inputValues Inputs that the user entered in this order edition form\n */\nfunction getOrdersBeingAffect(allData, inputValues) {\n  const ordersInOriginalLineAndDate = allData.filter(\n    order =>\n      order.production_line === _rowData.production_line &&\n      order.order_date === _rowData.order_date\n  );\n  return ordersInOriginalLineAndDate.filter(order => {\n    let endTime = moment(inputValues.scheduled_end_datetime);\n    return (\n      order.scheduled_start_datetime >= endTime.valueOf() &&\n      order.order_date === _rowData.order_date\n    );\n  });\n}\n\n/**\n * Expect the user inputs\n * Compare the user inputs and the globe scope var called 'rowData'\n * Check if the user inputs is different from the rowData to determine if the Tags are changed\n * @param {*} inputs\n */\nfunction hasTagsChanged(inputs) {\n  if (!_rowData) {\n    //if there is no rowData, meaning that the user is creating a new order, so return false\n    return false;\n  }\n  const product_id = inputs.product.split(' | ')[0];\n  const product_desc = inputs.product.split(' | ')[1];\n  return (\n    inputs.orderId !== _rowData.order_id ||\n    product_id !== _rowData.product_id ||\n    product_desc !== _rowData.product_desc\n  );\n}\n\n/**\n * Compares the user input and the original order to see if the line has been changed.\n * return true if it is.\n * @param {*} inputValues The user input\n */\nfunction isLineChanged(inputValues) {\n  return inputValues.productionLine !== _rowData.production_line;\n}\n\n/**\n * Expect the user inputs\n * Check if the user inputs are valid\n * Stop and prompt error if the inputs are not valid\n * @param {*} data\n */\nfunction isValueValid(data) {\n  const dateRegExp = new RegExp(\n    '^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$'\n  );\n  const prodList = products.reduce((arr, p) => {\n    const str = p.id + ' | ' + p.product_desc;\n    arr.push(str);\n    return arr;\n  }, []);\n\n  let productionLineList = equipment.reduce((arr, equ) => {\n    arr.push(equ.site + ' | ' + equ.area + ' | ' + equ.production_line);\n    return arr;\n  }, []);\n  productionLineList = utils.distinctElems(productionLineList);\n\n  if (data.orderId === '') {\n    utils.alert(\n      'warning',\n      'Warning',\n      'Order Number Empty, please enter the Order Number'\n    );\n    return false;\n  }\n\n  if (data.orderQty === '') {\n    utils.alert(\n      'warning',\n      'Warning',\n      'Order Quantity Empty, please enter the Order Quantity'\n    );\n    return false;\n  }\n\n  if (data.productionLine === '') {\n    utils.alert(\n      'warning',\n      'Warning',\n      'Production Line Empty, please enter the Production Line'\n    );\n    return false;\n  } else {\n    if (productionLineList.indexOf(data.productionLine) === -1) {\n      utils.alert(\n        'warning',\n        'Warning',\n        'Production Line Not Exist, please select a Production Line from the Production Line List'\n      );\n      return false;\n    }\n  }\n\n  if (data.product === '') {\n    utils.alert(\n      'warning',\n      'Warning',\n      'Product Empty, please enter the Product'\n    );\n    return false;\n  } else {\n    if (prodList.indexOf(data.product) === -1) {\n      utils.alert(\n        'warning',\n        'Warning',\n        'Product Not Exist, please select a Product from the Product List'\n      );\n      return false;\n    }\n  }\n\n  if (!dateRegExp.test(data.date)) {\n    utils.alert(\n      'warning',\n      'Warning',\n      'Scheduled Start Date Empty or Invalid Date Format, please choose a date from the date picker'\n    );\n    return false;\n  }\n\n  if (data.plannedRate === '') {\n    utils.alert(\n      'warning',\n      'Warning',\n      'Planned Rate Empty, please enter the Planned Rate'\n    );\n    return false;\n  }\n\n  return true;\n}\n\nexport { showOrderEditingForm };\n"]}