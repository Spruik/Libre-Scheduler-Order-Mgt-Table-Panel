{"version":3,"sources":["../src/action_options_form_ctrl.js"],"names":["showActionOptionsForm","productionLine","orderId","productDesc","productId","tags","prodLine","prodDesc","prodId","_allData","tableCtrl","allData","console","log","getRowData","then","init","res","catch","utils","alert","e","_rowData","status","toLowerCase","appEvents","emit","src","modalClass","model","removeListeners","addListeners","Promise","resolve","reject","data","filter","order","production_line","order_id","product_id","length","$","document","on","target","id","showOrderEditingForm","closeForm","updateOrder","off","action","line","writeInfluxLine","deleteCurrentAndUpdateAffectOrders","post","influx","writeUrl","refreshDashboard","promises","affectedOrders","scheduled_start_datetime","scheduled_end_datetime","order_date","deletingOrderDurationHour","moment","duration","order_qty","planned_rate","deletingOrderChangeover","planned_changeover_time","deletingOrderTotalDur","add","forEach","writeLineForTimeUpdate","push","all","product_desc","split","join","compl_qty","undefined","machine_state","scrap_qty","setpoint_rate","trigger"],"mappings":"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","file":"action_options_form_ctrl.js","sourcesContent":["import { showOrderEditingForm } from './order_form_ctrl'\nimport { appEvents } from 'app/core/core'\nimport * as utils from './utils'\nimport * as tableCtrl from './table_ctrl'\nimport * as influx from './influxHelper'\nimport moment from 'moment'\n\nlet _rowData\nlet _allData\n\nconst closeForm = () => {\n  $('a#order-mgt-scheduler-action-option-close-btn').trigger('click')\n}\n\n/**\n * Expect four params which are the tags values and are for querying the record data\n * Show the action options form once the query is finished\n * Remove listener and then add listener, which is to prevent listeners duplication\n * @param {*} productionLine \n * @param {*} orderId \n * @param {*} productDesc \n * @param {*} productId \n */\nfunction showActionOptionsForm(productionLine, orderId, productDesc, productId){\n  //get data\n  let tags = {prodLine: productionLine, orderId: orderId, prodDesc: productDesc, prodId: productId}\n  _allData = tableCtrl.allData()\n  console.log('before getrowdata, alldata');\n  console.log(_allData);\n  getRowData(_allData, tags).then(res => {init(res)}).catch(e => {utils.alert('error', 'Error', e)})\n}\n\nfunction init(res){\n  _rowData = res\n  console.log('after getrowdata, data');\n  console.log(_rowData);\n  if(_rowData.status.toLowerCase() !== 'planned' && _rowData.status.toLowerCase() !== 'ready'){\n    utils.alert('warning', 'Warning', 'This order is ' + _rowData.status + ' and is no longer available for editing')\n    return\n  }\n\n  appEvents.emit('show-modal', {\n    src: 'public/plugins/smart-factory-scheduler-order-mgt-table-panel/partials/action_options.html',\n    modalClass: 'confirm-modal',\n    model: {}\n  })\n\n  removeListeners()\n  addListeners()\n}\n\n/**\n * Use the tags to filter out the clicked order data from all data\n * And return it\n * @param {*} allData All orders\n * @param {*} tags The tags of the order that is clicked\n */\nfunction getRowData(allData, tags){\n  return new Promise((resolve, reject) => {\n    const data =  allData.filter(order => order.production_line === tags.prodLine \n      && order.order_id === tags.orderId \n      && order.product_id === tags.prodId)[0]\n      if (data.length === 0) {\n        reject('Order not found')\n      }else {\n        resolve(data)\n      }\n  })\n}\n\n/**\n * Add listener for the action selection\n * If edit clicked, go to the edit form with the current record data\n * If realease clicked, change record status to 'Ready'\n * If delete clicked, change record status to 'Deleted'\n */\nfunction addListeners() {\n  $(document).on('click', 'input[type=\"radio\"][name=\"order-mgt-scheduler-actions-radio\"]', e => {\n    \n    if (e.target.id === 'edit') {\n      showOrderEditingForm(_rowData, _allData)\n    }else if (e.target.id === 'release') {\n      if (_rowData.status === 'Ready') {\n        utils.alert('warning', 'Warning', 'Order has already been released')\n        closeForm()\n      }else {\n        updateOrder('Ready')\n      }\n    }else if (e.target.id === 'delete') {\n      updateOrder('Deleted')\n    }\n\n  })\n}\n\n/**\n * Remove listener for the action selection\n */\nfunction removeListeners() {\n  $(document).off('click', 'input[type=\"radio\"][name=\"order-mgt-scheduler-actions-radio\"]')\n}\n\n/**\n * Expect the action string (Normally are: 'Ready' or 'Deleted')\n * Use the action var passed in to write the line\n * Then update the record\n * Stop and prompt error if it fails\n * @param {*} action \n */\nfunction updateOrder(action) {\n  const line = writeInfluxLine(action)\n  if (action === 'Deleted') {\n    deleteCurrentAndUpdateAffectOrders(line)\n  }else{\n    utils.post(influx.writeUrl, line).then(res => {\n      utils.alert('success', 'Success', 'Order has been marked as ' + action)\n      closeForm()\n      tableCtrl.refreshDashboard()\n    }).catch(e => {\n      utils.alert('error', 'Database Error', 'An error occurred while writing data to the influxdb : ' + e + 'please check the basebase connection')\n      closeForm()\n    })\n  }\n}\n\nfunction deleteCurrentAndUpdateAffectOrders(line){\n  //create promises array and put the 'delete current order request' into it first\n  let promises = [utils.post(influx.writeUrl, line)]\n\n  //get all orders data for further filtering\n  const allData = tableCtrl.allData()\n\n  //filter affected orders using all orders data\n  //affected orders = order.startTime >= thisOrder.endtime && in the same line && with the same date.\n  const affectedOrders = allData.filter(order => order.scheduled_start_datetime >= _rowData.scheduled_end_datetime && order.production_line === _rowData.production_line && order.order_date === _rowData.order_date)\n  \n  //work out thisOrder's total duration, which = its duration + its changeover duration\n  const deletingOrderDurationHour = moment.duration(_rowData.order_qty / _rowData.planned_rate, 'hours') \n  const deletingOrderChangeover = moment.duration(_rowData.planned_changeover_time, 'H:mm:ss')\n  const deletingOrderTotalDur = deletingOrderDurationHour.add(deletingOrderChangeover)\n  \n  //loop affected orders, order's starttime and endtime should both subtract the total duration worked out\n  affectedOrders.forEach(order => {\n    const line = influx.writeLineForTimeUpdate(order, deletingOrderTotalDur, 'subtract')\n    promises.push(utils.post(influx.writeUrl, line))\n  })\n\n  Promise.all(promises).then(() => {\n    utils.alert('success', 'Success', 'Order has been marked as Deleted')\n    closeForm()\n    tableCtrl.refreshDashboard()\n  }).catch(e => {\n    utils.alert('error', 'Database Error', 'An error occurred while deleting the order : ' + e)\n    closeForm()\n  })\n}\n\n/**\n * Expect the status string (Normally are: 'Ready' or 'Deleted')\n * Then changed the status in the line with anything else unchanged\n * @param {*} status \n */\nfunction writeInfluxLine(status){\n  //For influxdb tag keys, must add a forward slash \\ before each space \n  let product_desc = _rowData.product_desc.split(' ').join('\\\\ ')\n\n  let line = 'OrderPerformance,order_id=' + _rowData.order_id + ',product_id=' + _rowData.product_id + ',product_desc=' + product_desc + ' '\n\n  if (_rowData.compl_qty !== null && _rowData.compl_qty !== undefined) {\n    line += 'compl_qty=' + _rowData.compl_qty + ','\n  }\n  if (_rowData.machine_state !== null && _rowData.machine_state !== undefined) {\n    line += 'machine_state=\"' + _rowData.machine_state + '\"' + ','\n  }\n  if (_rowData.scrap_qty !== null && _rowData.scrap_qty !== undefined) {\n    line += 'scrap_qty=' + _rowData.scrap_qty + ','\n  }\n  if (_rowData.setpoint_rate !== null && _rowData.setpoint_rate !== undefined) {\n    line += 'setpoint_rate=' + _rowData.setpoint_rate + ','\n  }\n\n  if (_rowData.scheduled_end_datetime !== null && _rowData.scheduled_end_datetime !== undefined) {\n    line += 'scheduled_end_datetime=' + _rowData.scheduled_end_datetime + ','\n    line += 'scheduled_start_datetime=' + _rowData.scheduled_start_datetime + ','\n  }\n\n  line += 'order_state=\"' + status + '\"' + ','\n  line += 'order_date=\"' + _rowData.order_date + '\"' + ','\n  line += 'planned_changeover_time=\"' + _rowData.planned_changeover_time + '\"' + ','\n  line += 'production_line=\"' + _rowData.production_line + '\"' + ','\n  line += 'order_qty=' + _rowData.order_qty + ','\n  line += 'planned_rate=' + _rowData.planned_rate\n\n//   console.log('writeInfluxLine');\n//   console.log(line);\n  return line\n}\n\nexport { showActionOptionsForm }"]}