{"version":3,"sources":["../src/order_form_ctrl.js"],"names":["showOrderEditingForm","data","rowData","getProductsAndEquipments","callback","appEvents","emit","src","modalClass","model","tryCatchCount","tryCatchCtrl","removeListeners","addListeners","setTimeout","startCtrl","e","console","log","$","trigger","utils","alert","enableInstantSearch","products","equipment","datepicker","orientation","todayBtn","format","autoclose","prefillData","productsUrl","postgRestHost","equipmentsUrl","get","then","res","catch","val","order_id","order_qty","production_line","product_id","product_desc","order_date","planned_rate","document","on","serializeArray","submitOrder","off","inputValues","orderId","value","orderQty","productionLine","product","date","plannedRate","isValueValid","url","influxHost","hasTagsChanged","updateWithTagsChanged","updateWithTagsUnchanged","input","newLine","writeInfluxLine","oldLine","writeOldInfluxLine","post","error","line","undefined","inputs","split","dateRegExp","RegExp","prodList","reduce","arr","p","str","push","productionLineList","equ","site","area","distinctElems","indexOf","test","join","completion_qty","machine_state","scrap_qty","setpoint_rate","bootstrap_datepicker"],"mappings":"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","file":"order_form_ctrl.js","sourcesContent":["import * as utils from './utils'\nimport { appEvents } from 'app/core/core'\nimport { enableInstantSearch } from './instant_search_ctrl'\nimport  * as bootstrap_datepicker  from './libs/bootstrap-datepicker'\n\nlet products\nlet equipment\nlet rowData\nlet tryCatchCount = 1\n\n/**\n * This function is the entry point to show the order editing form\n * It accepts one param, with is called 'data'\n * This 'data' is empty when the user clicks the create icon to create a new order\n * This 'data' is not empty when the user clicks the row to edit the order, and the form will be pre-fill based on the data passed in\n * @param {*} data\n */\nfunction showOrderEditingForm (data) {\n\n  rowData = data\n  \n  getProductsAndEquipments(callback)\n\n  function callback () {\n\n    appEvents.emit('show-modal', {\n        src: 'public/plugins/smart-factory-scheduler-order-mgt-table-panel/partials/order_form.html',\n        modalClass: 'confirm-modal',\n        model: {}\n    })\n\n    tryCatchCount = 1\n    tryCatchCtrl()\n\n    removeListeners()\n    addListeners()\n  }\n}\n\n/**\n * Try enable the insatnt search function and the datepicker\n * Re-try if it fails\n * Stop and prompt error if it fails more than 15 times\n */\nfunction tryCatchCtrl(){\n  setTimeout(() => {\n    try {\n      startCtrl()\n    } catch (e) {\n      if (tryCatchCount < 15) {\n        tryCatchCtrl()\n        console.log('Re-init: ' + tryCatchCount);\n        tryCatchCount ++\n      }else {\n        console.log(e)\n        $('#order-mgt-scheduler-form-cancelBtn').trigger('click')\n        utils.alert('error', 'Error', 'Form initialisation failed, please try agian')\n      }\n    }\n  }, 200);\n}\n\n/**\n * Enable instant search function and the datepicker\n */\nfunction startCtrl(){\n  enableInstantSearch(products, equipment)\n  $('#datepicker').datepicker({\n      orientation: 'top',\n      todayBtn: 'linked',\n      format: 'yyyy-mm-dd',\n      autoclose: true,\n  })\n  prefillData()\n}\n\n/**\n * Get the product list and production line list from postgresql\n * Call the callback fn passed in once it is finished\n * Stop and prompt error when it fails\n * @param {fn} callback \n */\nfunction getProductsAndEquipments (callback) {\n  let productsUrl = utils.postgRestHost + 'products'\n  let equipmentsUrl = utils.postgRestHost + 'equipment?production_line=not.is.null'\n\n  utils.get(productsUrl)\n    .then(res => {\n      products = res\n      utils.get(equipmentsUrl)\n        .then(res => {\n          equipment = res\n          callback()\n        })\n        .catch(e => {\n          console.log(e)\n          utils.alert('error', 'Error', 'An error occurred while fetching data from the postgresql, please check the basebase connection')\n        })\n    })\n    .catch(e => {\n      console.log(e)\n      utils.alert('error', 'Error', 'An error occurred while fetching data from the postgresql, please check the basebase connection')\n    })\n}\n\n/**\n * Pre-fiil the information when it comes with data (When the user clicks the row)\n */\nfunction prefillData(){\n  if (rowData) {\n    // console.log('need to pre-fill')\n    $('input.ord-mgt-datalist-input#order-id').val(rowData.order_id)\n    $('input.ord-mgt-datalist-input#order-qty').val(rowData.order_qty)\n    $('input.ord-mgt-datalist-input#datalist-input-production-line').val(rowData.production_line)\n    $('input.ord-mgt-datalist-input#datalist-input-products').val(rowData.product_id + ' | ' + rowData.product_desc)\n    $('input.ord-mgt-datalist-input#datepicker').val(rowData.order_date)\n    $('input.ord-mgt-datalist-input#planned-rate').val(rowData.planned_rate)\n  }\n}\n\n/**\n * Add click event listener for the submit btn\n */\nfunction addListeners(){\n  $(document).on('click', 'button#order-mgt-scheduler-form-submitBtn', e => {\n    let data = $('form#order-mgt-scheduler-form').serializeArray()\n    submitOrder(data)\n  })\n}\n\n/**\n * Remove the click event listner for the submit btn\n */\nfunction removeListeners(){\n  $(document).off('click', 'button#order-mgt-scheduler-form-submitBtn')\n}\n\n/**\n * Expect the form data and then check if the form data is valid\n * If data is valid, check if the tags are changed, simply update the record if tags are unchanged\n * Or create a new record with the validated form data then update the old record's status as 'Replaced'\n * @param {*} data \n */\nfunction submitOrder(data) {\n  \n  const inputValues = {\n    orderId: data[0].value, \n    orderQty: data[1].value, \n    productionLine: data[2].value, \n    product: data[3].value, \n    date: data[4].value, \n    plannedRate: data[5].value\n  }\n\n  if (isValueValid(inputValues)) {\n    const url = utils.influxHost + 'write?db=smart_factory'\n    if (hasTagsChanged(inputValues)) {\n      updateWithTagsChanged(url, inputValues)\n    }else {\n      updateWithTagsUnchanged(url, inputValues)\n    }\n  }\n\n}\n\n/**\n * Send Post request to write the influxdb with the url passed in and the line later created\n * Create a new record with the validated input\n * Update the old record as 'Replaced'\n * Stop and prompt error when it fails\n * @param {*} url \n * @param {*} input \n */\nfunction updateWithTagsChanged(url, input){\n\n  const newLine = writeInfluxLine(input)\n  const oldLine = writeOldInfluxLine()\n  utils.post(url, newLine).then(() => {\n    utils.post(url, oldLine).then(() => {\n      utils.alert('success', 'Success', 'Order has been successfully updated')\n      $('#order-mgt-scheduler-form-cancelBtn').trigger('click')\n    }).catch(error => {\n      console.log(error)\n      utils.alert('error', 'Database Error', 'An error occurred while updating data to the influxdb, please check the basebase connection')\n      $('#order-mgt-scheduler-form-cancelBtn').trigger('click')\n    })\n  }).catch(error => {\n      console.log(error)\n      utils.alert('error', 'Database Error', 'An error occurred while updating data to the influxdb, please check the basebase connection')\n      $('#order-mgt-scheduler-form-cancelBtn').trigger('click')\n  })\n\n}\n\n/**\n * Send Post request to write the influxdb with the url passed in and the line later created\n * Simply update the record\n * Stop and prompt error when it fails\n * @param {*} url \n * @param {*} input \n */\nfunction updateWithTagsUnchanged(url, input){\n\n  const line = writeInfluxLine(input)\n  utils.post(url, line).then(res => {\n    utils.alert('success', 'Success', (rowData !== '' && rowData !== undefined) ? 'Order has been successfully updated' : 'Order has been successfully created')\n    $('#order-mgt-scheduler-form-cancelBtn').trigger('click')\n  }).catch(e => {\n    console.log(e)\n    utils.alert('error', 'Database Error', 'An error occurred while updating data to the influxdb, please check the basebase connection')\n    $('#order-mgt-scheduler-form-cancelBtn').trigger('click')\n  })\n\n}\n\n/**\n * Expect the user inputs\n * Compare the user inputs and the globe scope var called 'rowData'\n * Check if the user inputs is different from the rowData to determine if the Tags are changed\n * @param {*} inputs \n */\nfunction hasTagsChanged(inputs) {\n  if (!rowData) {\n    return false\n  }\n  const product_id = inputs.product.split(' | ')[0]\n  const product_desc = inputs.product.split(' | ')[1]\n  return (\n    inputs.orderId !== rowData.order_id \n    || inputs.productionLine !== rowData.production_line \n    || product_id !== rowData.product_id \n    || product_desc !== rowData.product_desc\n  )\n}\n\n/**\n * Expect the user inputs\n * Check if the user inputs are valid\n * Stop and prompt error if the inputs are not valid\n * @param {*} data \n */\nfunction isValueValid(data) {\n\n  const dateRegExp = new RegExp('^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$')\n  const prodList = products.reduce((arr, p) => {\n    const str = p.product_id + ' | ' + p.product_desc\n    arr.push(str)\n    return arr\n  }, [])\n\n  let productionLineList = equipment.reduce((arr, equ) => {\n    arr.push(equ.site + ' | ' + equ.area + ' | ' + equ.production_line)\n    return arr\n  }, [])  \n  productionLineList = utils.distinctElems(productionLineList)\n\n  if (data.orderId === '') {\n    utils.alert('warning', 'Warning', 'Order Number Empty, please enter the Order Number')\n    return false\n  }\n\n  if (data.orderQty === '') {\n    utils.alert('warning', 'Warning', 'Order Quantity Empty, please enter the Order Quantity')\n    return false\n  }\n\n  if (data.productionLine === '') {\n    utils.alert('warning', 'Warning', 'Production Line Empty, please enter the Production Line')\n    return false\n  }else {\n    if (productionLineList.indexOf(data.productionLine) === -1) {\n      utils.alert('warning', 'Warning', 'Production Line Not Exist, please select a Production Line from the Production Line List')\n      return false\n    }\n  }\n\n  if (data.product === '') {\n    utils.alert('warning', 'Warning', 'Product Empty, please enter the Product')\n    return false\n  }else {\n    if (prodList.indexOf(data.product) === -1) {\n      utils.alert('warning', 'Warning', 'Product Not Exist, please select a Product from the Product List')\n      return false\n    }\n  }\n\n  if (!dateRegExp.test(data.date)) {\n    utils.alert('warning', 'Warning', 'Scheduled Start Date Empty or Invalid Date Format, please choose a date from the date picker')\n    return false\n  }\n\n  if (data.plannedRate === '') {\n    utils.alert('warning', 'Warning', 'Planned Rate Empty, please enter the Planned Rate')\n    return false\n  }\n\n  return true\n}\n\n/**\n * Expect the validated user inputs\n * Write line to update the record with the user inputs passed in\n * @param {*} data \n */\nfunction writeInfluxLine (data) {\n  const product_id = data.product.split(' | ')[0]\n  let product_desc = data.product.split(' | ')[1]\n\n  //For influxdb tag keys, must add a forward slash \\ before each space \n  product_desc = product_desc.split(' ').join('\\\\ ')\n  data.productionLine = data.productionLine.split(' ').join('\\\\ ')\n\n  let line = 'OrderPerformance,order_id=' + data.orderId + ',product_id=' + product_id + ',product_desc=' + product_desc + ',production_line=' + data.productionLine + ' '\n\n  if (rowData) {\n    if (rowData.completion_qty !== null && rowData.completion_qty !== undefined) {\n      line += 'completion_qty=' + rowData.completion_qty + ','\n    }\n    if (rowData.machine_state !== null && rowData.machine_state !== undefined) {\n      line += 'machine_state=\"' + rowData.machine_state + '\"' + ','\n    }\n    if (rowData.scrap_qty !== null && rowData.scrap_qty !== undefined) {\n      line += 'scrap_qty=' + rowData.scrap_qty + ','\n    }\n  }\n\n  line += 'order_state=\"' + 'Planned' + '\"' + ','\n  line += 'order_date=\"' + data.date + '\"' + ','\n  line += 'order_qty=' + data.orderQty + ','\n  line += 'setpoint_rate=' + 0 + ','\n  line += 'planned_rate=' + data.plannedRate\n\n  // console.log(line);\n  return line\n}\n\n/**\n * Write line to changed the record's status to 'Replaced'\n */\nfunction writeOldInfluxLine(){\n    //For influxdb tag keys, must add a forward slash \\ before each space \n    let product_desc = rowData.product_desc.split(' ').join('\\\\ ')\n    let production_line = rowData.production_line.split(' ').join('\\\\ ')\n  \n    let line = 'OrderPerformance,order_id=' + rowData.order_id + ',product_id=' + rowData.product_id + ',product_desc=' + product_desc + ',production_line=' + production_line + ' '\n  \n    if (rowData.completion_qty !== null && rowData.completion_qty !== undefined) {\n      line += 'completion_qty=' + rowData.completion_qty + ','\n    }\n    if (rowData.machine_state !== null && rowData.machine_state !== undefined) {\n      line += 'machine_state=\"' + rowData.machine_state + '\"' + ','\n    }\n    if (rowData.scrap_qty !== null && rowData.scrap_qty !== undefined) {\n      line += 'scrap_qty=' + rowData.scrap_qty + ','\n    }\n    if (rowData.setpoint_rate !== null && rowData.setpoint_rate !== undefined) {\n      line += 'setpoint_rate=' + rowData.setpoint_rate + ','\n    }\n\n  \n    line += 'order_state=\"' + 'Replaced' + '\"' + ','\n    line += 'order_date=\"' + rowData.order_date + '\"' + ','\n    line += 'order_qty=' + rowData.order_qty + ','\n    line += 'planned_rate=' + rowData.planned_rate\n  \n    // console.log(line);\n    return line\n}\n\nexport { showOrderEditingForm }\n"]}