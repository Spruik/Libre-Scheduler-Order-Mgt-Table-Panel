{"version":3,"sources":["../src/influxHelper.js"],"names":["writeLineForUpdate","status","data","line","writeTags","order_id","product_id","compl_qty","undefined","machine_state","getRid","scrap_qty","setpoint_rate","startTime","scheduled_start_datetime","endTime","scheduled_end_datetime","product_desc","order_date","planned_changeover_time","production_line","order_qty","planned_rate","writeLineForUpdateWithChangingTime","currentStatus","product","split","orderId","date","productionLine","changeover","orderQty","plannedRate","writeLineForTimeUpdate","timeDiff","action","hasTurnedAround","roundedTimeDiff","roundTime","moment","subtract","valueOf","add","console","log","format","writeLineForUpdateWithRemovingTime","prod_id","timeText","getTimeText","duration","time","get","hour","mins","seconds","x","join","utils","writeUrl","influxHost"],"mappings":"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","file":"influxHelper.js","sourcesContent":["import * as utils from './utils';\nimport moment from 'moment';\n\nexport const writeUrl = utils.influxHost + 'write?db=smart_factory';\n\nlet hasTurnedAround = false;\n\n/**\n * Expect the status string (Normally are: 'Ready' or 'Deleted')\n * Then changed the status in the line with anything else unchanged\n * @param {*} status\n */\nexport function writeLineForUpdate(status, data) {\n  // For influxdb tag keys, must add a forward slash \\ before each space\n\n  let line = writeTags(data.order_id, data.product_id);\n\n  if (data.compl_qty !== null && data.compl_qty !== undefined) {\n    line += 'compl_qty=' + data.compl_qty + ',';\n  }\n  if (data.machine_state !== null && data.machine_state !== undefined) {\n    line += 'machine_state=\"' + getRid(data.machine_state) + '\"' + ',';\n  }\n  if (data.scrap_qty !== null && data.scrap_qty !== undefined) {\n    line += 'scrap_qty=' + data.scrap_qty + ',';\n  }\n  if (data.setpoint_rate !== null && data.setpoint_rate !== undefined) {\n    line += 'setpoint_rate=' + data.setpoint_rate + ',';\n  }\n\n  const startTime = data.scheduled_start_datetime\n    ? data.scheduled_start_datetime\n    : 0;\n  const endTime = data.scheduled_end_datetime ? data.scheduled_end_datetime : 0;\n\n  line += 'order_state=\"' + getRid(status) + '\"' + ',';\n  line += 'product_desc=\"' + getRid(data.product_desc) + '\"' + ',';\n  line += 'order_date=\"' + getRid(data.order_date) + '\"' + ',';\n  line +=\n    'planned_changeover_time=\"' + data.planned_changeover_time + '\"' + ',';\n  line += 'scheduled_end_datetime=' + endTime + ',';\n  line += 'scheduled_start_datetime=' + startTime + ',';\n  line += 'production_line=\"' + getRid(data.production_line) + '\"' + ',';\n  line += 'order_qty=' + data.order_qty + ',';\n  line += 'planned_rate=' + data.planned_rate;\n\n  //   console.log('writeLineForUpdate');\n  return line;\n}\n\nexport function writeLineForUpdateWithChangingTime(\n  data,\n  currentStatus,\n  startTime,\n  endTime\n) {\n  const product_id = data.product.split(' | ')[0];\n  let product_desc = data.product.split(' | ')[1];\n\n  // For influxdb tag keys, must add a forward slash \\ before each space\n  // product_desc = product_desc.split(' ').join('\\\\ ')\n\n  let line = writeTags(data.orderId, product_id);\n  line += 'order_state=\"' + getRid(currentStatus) + '\"' + ',';\n  line += 'product_desc=\"' + getRid(product_desc) + '\"' + ',';\n  line += 'order_date=\"' + data.date + '\"' + ',';\n  line += 'production_line=\"' + getRid(data.productionLine) + '\"' + ',';\n  line += 'planned_changeover_time=\"' + data.changeover + '\"' + ',';\n  line += 'scheduled_end_datetime=' + endTime + ',';\n  line += 'scheduled_start_datetime=' + startTime + ',';\n  line += 'order_qty=' + data.orderQty + ',';\n  line += 'setpoint_rate=' + 0 + ',';\n  line += 'planned_rate=' + data.plannedRate;\n\n  //   console.log('writeLineForUpdateWithChangingTime');\n  return line;\n}\n\n/**\n * Prepare a line for influxdb request\n * @param {{}} data Expecting Object : The order data that is to be updated\n * @param {moment} timeDiff Expecting (Moment Duration Object): The time difference that this order is going to add / subtract\n * @param {string} action Expecting String : The action (add / subtract), example -> 'subtract'\n */\nexport function writeLineForTimeUpdate(data, timeDiff, action) {\n  hasTurnedAround = false;\n  const roundedTimeDiff = roundTime(timeDiff);\n\n  //if the roundedTimeDiff has been turned around from negative to positive\n  //set 'subtract' to add , or 'add' to subtract to also turn the operators around.\n  if (action === 'subtract') {\n    if (hasTurnedAround) {\n      action = 'add';\n    }\n  } else {\n    if (hasTurnedAround) {\n      action = 'subtract';\n    }\n  }\n\n  let endTime =\n    action === 'subtract'\n      ? (endTime = moment(data.scheduled_end_datetime)\n          .subtract(roundedTimeDiff)\n          .valueOf())\n      : (endTime = moment(data.scheduled_end_datetime)\n          .add(roundedTimeDiff)\n          .valueOf());\n\n  let startTime =\n    action === 'subtract'\n      ? (startTime = moment(data.scheduled_start_datetime)\n          .subtract(roundedTimeDiff)\n          .valueOf())\n      : (startTime = moment(data.scheduled_start_datetime)\n          .add(roundedTimeDiff)\n          .valueOf());\n\n  console.log('startTime');\n  console.log(moment(startTime).format('YYYY-MM-DD HH:MM:SS'));\n  console.log('endTime');\n  console.log(moment(endTime).format('YYYY-MM-DD HH:MM:SS'));\n\n  // For influxdb tag keys, must add a forward slash \\ before each space\n  // let product_desc = data.product_desc.split(' ').join('\\\\ ')\n\n  let line = writeTags(data.order_id, data.product_id);\n\n  if (data.compl_qty !== null && data.compl_qty !== undefined) {\n    line += 'compl_qty=' + data.compl_qty + ',';\n  }\n  if (data.machine_state !== null && data.machine_state !== undefined) {\n    line += 'machine_state=\"' + getRid(data.machine_state) + '\"' + ',';\n  }\n  if (data.scrap_qty !== null && data.scrap_qty !== undefined) {\n    line += 'scrap_qty=' + data.scrap_qty + ',';\n  }\n  if (data.setpoint_rate !== null && data.setpoint_rate !== undefined) {\n    line += 'setpoint_rate=' + data.setpoint_rate + ',';\n  }\n\n  line += 'order_state=\"' + getRid(data.status) + '\"' + ',';\n  line += 'product_desc=\"' + getRid(data.product_desc) + '\"' + ',';\n  line += 'order_date=\"' + getRid(data.order_date) + '\"' + ',';\n  line +=\n    'planned_changeover_time=\"' + data.planned_changeover_time + '\"' + ',';\n  line += 'production_line=\"' + getRid(data.production_line) + '\"' + ',';\n  line += 'order_qty=' + data.order_qty + ',';\n  line += 'scheduled_end_datetime=' + endTime + ',';\n  line += 'scheduled_start_datetime=' + startTime + ',';\n  line += 'planned_rate=' + data.planned_rate;\n\n  //   console.log('writeLineForTimeUpdate');\n  return line;\n}\n\nexport function writeLineForUpdateWithRemovingTime(data, currentStatus) {\n  const product_id = data.product.split(' | ')[0];\n  let product_desc = data.product.split(' | ')[1];\n\n  // For influxdb tag keys, must add a forward slash \\ before each space\n  // product_desc = product_desc.split(' ').join('\\\\ ')\n\n  let line = writeTags(data.orderId, product_id);\n  line += 'order_state=\"' + getRid(currentStatus) + '\"' + ',';\n  line += 'product_desc=\"' + getRid(product_desc) + '\"' + ',';\n  line += 'order_date=\"' + data.date + '\"' + ',';\n  line += 'production_line=\"' + getRid(data.productionLine) + '\"' + ',';\n  line += 'planned_changeover_time=\"' + data.changeover + '\"' + ',';\n  line += 'order_qty=' + data.orderQty + ',';\n  line += 'setpoint_rate=' + 0 + ',';\n  line += 'planned_rate=' + data.plannedRate;\n\n  //   console.log('writeLineForUpdateWithRemovingTime');\n  return line;\n}\n\nfunction writeTags(order_id, prod_id) {\n  return `OrderPerformance,order_id=${order_id},product_id=${prod_id} `;\n}\n\n/**\n * Take a moment duration obj, take this obj's hours mins and seconds to make a new moment duration\n * The purpose is to make a new duration with rounded milsec that is easier for calculation\n * Return the new duration with rounded milsec\n * @param {moment duration obj} timeDiff The moment duration obj\n */\nfunction roundTime(timeDiff) {\n  const timeText = getTimeText(timeDiff);\n  return moment.duration(timeText, 'H:mm:ss');\n}\n\n/**\n * Take a moment duration obj, return a string text of 'h:mm:ss' of the duration\n * If the duration is negative, turn all the negative to positive and set 'hasTurnedAround' to true\n * @param {moment duration obj} time The moment duration obj\n */\nfunction getTimeText(time) {\n  if (time.get('h') < 0 || time.get('minutes') < 0 || time.get('seconds') < 0) {\n    hasTurnedAround = true;\n  }\n\n  const hour = time.get('h') < 0 ? time.get('h') * -1 : time.get('h');\n  const mins =\n    time.get('minutes') < 0 ? time.get('minutes') * -1 : time.get('minutes');\n  const seconds =\n    time.get('seconds') < 0 ? time.get('seconds') * -1 : time.get('seconds');\n\n  return hour + ':' + mins + ':' + seconds;\n}\n\nfunction getRid(x) {\n  return x.split('\"').join('\\\\\"');\n}\n"]}