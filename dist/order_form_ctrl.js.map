{"version":3,"sources":["../src/order_form_ctrl.js"],"names":["showOrderEditingForm","data","alldata","_rowData","_allData","getProductsAndEquipments","callback","appEvents","emit","src","modalClass","model","tryCatchCount","tryCatchCtrl","removeListeners","addListeners","setTimeout","startCtrl","e","console","log","$","trigger","utils","alert","enableInstantSearch","products","equipment","datepicker","orientation","todayBtn","format","autoclose","timepicker","showMeridian","showSeconds","maxHours","minuteStep","secondStep","defaultTime","icons","up","down","prefillData","productsUrl","postgRestHost","equipmentsUrl","get","then","res","catch","val","order_id","order_qty","production_line","product_id","product_desc","order_date","planned_rate","planned_changeover_time","updateDuration","document","on","serializeArray","submitOrder","value","off","qty","rate","durationHrs","parseInt","momentDuration","moment","duration","durationText","getDurationText","month","days","hrs","mins","text","inputValues","orderId","orderQty","productionLine","product","date","plannedRate","changeover","scheduled_end_datetime","scheduled_start_datetime","isValueValid","updateOrder","ordersBeingAffected","getOrdersBeingAffect","_ordersBeingAffected","isLineHavingSpareTimeForTheDay","hasTagsChanged","updateOldAndNewOrders","isLineChanged","updateWithRemoving","isDateChanged","updateWithChanging","line","influx","writeLineForUpdate","post","writeUrl","closeForm","originalStartTime","changeoverDiff","subtract","startTime","add","endTime","oldTotal","newTotal","difference","writeLineForUpdateWithChangingTime","status","valueOf","updateAffectedOrders","writeLineForUpdateWithRemovingTime","length","getDiff","tableCtrl","refreshDashboard","promises","forEach","writeLineForTimeUpdate","order","prom","push","Promise","all","diff","allData","rowData","affectedOrders","filter","targetDayStartTime","getLineStartTime","targetDayStartTimeText","nextDayStartTime","totalDur","isSameOrBefore","all_end_times","map","maxEndTime","Math","max","ordersInOriginalLineAndDate","inputs","split","dateRegExp","RegExp","prodList","reduce","arr","p","str","productionLineList","equ","site","area","distinctElems","indexOf","test","bootstrap_datepicker","bootstrap_timepicker","_orderDurationHours"],"mappings":"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","file":"order_form_ctrl.js","sourcesContent":["import * as utils from './utils'\nimport moment from 'moment'\nimport { appEvents } from 'app/core/core'\nimport { enableInstantSearch } from './instant_search_ctrl'\nimport  * as bootstrap_datepicker  from './libs/bootstrap-datepicker'\nimport  * as bootstrap_timepicker  from './libs/bootstrap-timepicker'\nimport * as influx from './influxHelper'\nimport * as tableCtrl from './table_ctrl'\n\nconst closeForm = () => $('#order-mgt-scheduler-form-close-btn').trigger('click')\n\nlet products\nlet equipment\nlet _rowData\nlet _ordersBeingAffected\nlet _allData\nlet tryCatchCount = 1\nlet _orderDurationHours\n\n/**\n * This function is the entry point to show the order editing form\n * It accepts one param, with is called 'data'\n * This 'data' is empty when the user clicks the create icon to create a new order\n * This 'data' is not empty when the user clicks the row to edit the order, and the form will be pre-fill based on the data passed in\n * @param {*} data\n */\nfunction showOrderEditingForm (data, alldata) {\n\n  _rowData = data\n  _allData = alldata\n\n  getProductsAndEquipments(callback)\n\n  function callback () {\n\n    appEvents.emit('show-modal', {\n        src: 'public/plugins/smart-factory-scheduler-order-mgt-table-panel/partials/order_form.html',\n        modalClass: 'confirm-modal',\n        model: {}\n    })\n\n    tryCatchCount = 1\n    tryCatchCtrl()\n\n    removeListeners()\n    addListeners()\n  }\n}\n\n/**\n * Try enable the insatnt search function and the datepicker\n * Re-try if it fails\n * Stop and prompt error if it fails more than 15 times\n */\nfunction tryCatchCtrl(){\n  setTimeout(() => {\n    try {\n      startCtrl()\n    } catch (e) {\n      if (tryCatchCount < 15) {\n        tryCatchCtrl()\n        console.log('Re-init: ' + tryCatchCount);\n        tryCatchCount ++\n      }else {\n        console.log(e)\n        $('#order-mgt-scheduler-form-cancelBtn').trigger('click')\n        utils.alert('error', 'Error', 'Form initialisation failed, please try agian')\n      }\n    }\n  }, 200);\n}\n\n/**\n * Enable instant search function and the datepicker\n */\nfunction startCtrl(){\n  enableInstantSearch(products, equipment)\n  $('#datepicker').datepicker({\n      orientation: 'top',\n      todayBtn: 'linked',\n      format: 'yyyy-mm-dd',\n      autoclose: true,\n  })\n\n  $('#changeover-minutes-picker').timepicker({\n    showMeridian: false,\n    showSeconds: true,\n    maxHours: 100,\n    minuteStep: 1,\n    secondStep: 1,\n    defaultTime: '00:00:00',\n    icons: {\n        up: 'fa fa-chevron-up',\n        down: 'fa fa-chevron-down'\n    }\n  })\n\n  prefillData()\n}\n\n/**\n * Get the product list and production line list from postgresql\n * Call the callback fn passed in once it is finished\n * Stop and prompt error when it fails\n * @param {fn} callback \n */\nfunction getProductsAndEquipments (callback) {\n  let productsUrl = utils.postgRestHost + 'products'\n  let equipmentsUrl = utils.postgRestHost + 'equipment?production_line=not.is.null'\n\n  utils.get(productsUrl)\n    .then(res => {\n      products = res\n      utils.get(equipmentsUrl)\n        .then(res => {\n          equipment = res\n          callback()\n        })\n        .catch(e => {\n          console.log(e)\n          utils.alert('error', 'Error', 'An error occurred while fetching data from the postgresql, please check the basebase connection')\n        })\n    })\n    .catch(e => {\n      console.log(e)\n      utils.alert('error', 'Error', 'An error occurred while fetching data from the postgresql, please check the basebase connection')\n    })\n}\n\n/**\n * Pre-fiil the information when it comes with data (When the user clicks the row)\n */\nfunction prefillData(){\n  if (_rowData) {\n    // console.log('need to pre-fill')\n    $('input.ord-mgt-datalist-input#order-id').val(_rowData.order_id)\n    $('input.ord-mgt-datalist-input#order-qty').val(_rowData.order_qty)\n    $('input.ord-mgt-datalist-input#datalist-input-production-line').val(_rowData.production_line)\n    $('input.ord-mgt-datalist-input#datalist-input-products').val(_rowData.product_id + ' | ' + _rowData.product_desc)\n    $('input.ord-mgt-datalist-input#datepicker').val(_rowData.order_date)\n    $('input.ord-mgt-datalist-input#planned-rate').val(_rowData.planned_rate)\n    $('input.ord-mgt-datalist-input#changeover-minutes-picker').val(_rowData.planned_changeover_time)\n    updateDuration(_rowData.order_qty, _rowData.planned_rate)\n  }\n}\n\n/**\n * Add click event listener for the submit btn\n */\nfunction addListeners(){\n  $(document).on('click', 'button#order-mgt-scheduler-form-submitBtn', e => {\n    let data = $('form#order-mgt-scheduler-form').serializeArray()\n    submitOrder(data)\n  })\n\n  $(document).on('input', 'input#planned-rate, input#order-qty', e => {\n    let data = $('form#order-mgt-scheduler-form').serializeArray()\n    updateDuration(data[1].value, data[5].value)\n  })\n}\n\n/**\n * Remove the click event listner for the submit btn\n */\nfunction removeListeners(){\n  $(document).off('click', 'button#order-mgt-scheduler-form-submitBtn')\n  $(document).off('input', 'input#planned-rate, input#order-qty')\n}\n\nfunction updateDuration(qty, rate){\n\n  if (qty !== \"\" && rate !== \"\") {\n    let durationHrs = parseInt(qty) / parseInt(rate)\n    let momentDuration = moment.duration(durationHrs, 'hours')\n\n    let durationText = getDurationText(momentDuration)\n    \n    $('input.ord-mgt-datalist-input#duration').val(durationText)\n  }else {\n    $('input.ord-mgt-datalist-input#duration').val('')\n  }\n}\n\nfunction getDurationText(momentDuration) {\n  let month = momentDuration.get('month')\n  let days = momentDuration.get('d')\n  let hrs = momentDuration.get('h')\n  let mins = momentDuration.get('minute')\n  let text = 'under 1 minute'\n\n  if (month > 0) {return 'Over a month!'}\n\n  if (days !== 0) { hrs += days * 24 }\n\n  if (hrs !== 0 && mins !== 0) {\n    text = hrs + ' hour(s) & ' + mins + ' minute(s)'\n  }else if (hrs !== 0 && mins === 0){\n    text = hrs + ' hour(s)'\n  }else if (hrs === 0 && mins !== 0){\n    text = mins + ' minute(s)'\n  }\n  \n  return text\n}\n\n/**\n * Expect the form data and then check if the form data is valid\n * If data is valid, check if the tags are changed, simply update the record if tags are unchanged\n * Or create a new record with the validated form data then update the old record's status as 'Replaced'\n * @param {*} data \n */\nfunction submitOrder(data) {\n  \n  const inputValues = {\n    orderId: data[0].value, \n    orderQty: data[1].value, \n    productionLine: data[2].value, \n    product: data[3].value, \n    date: data[4].value, \n    plannedRate: data[5].value,\n    duration: data[6].value,\n    changeover: data[7].value,\n    scheduled_end_datetime: _rowData.scheduled_start_datetime,\n    scheduled_end_datetime: _rowData.scheduled_end_datetime\n  }\n\n  if (isValueValid(inputValues)) {\n    updateOrder(inputValues)\n  }\n}\n\nfunction updateOrder(inputValues){\n  //the orders that are in the original line that this order was in and that are being affected because this order changes line\n  const ordersBeingAffected = getOrdersBeingAffect(_allData, inputValues)  \n  _ordersBeingAffected = ordersBeingAffected\n\n  if (!isLineHavingSpareTimeForTheDay(_allData, inputValues, _rowData)) {\n    utils.alert('warning', 'Warning', \"There is no spare space for this order to fit in this date's schedule\")\n    return\n  }\n\n  if (hasTagsChanged(inputValues)) {\n    updateOldAndNewOrders(inputValues)\n  }else {\n    //in here, check if the line has changed, if yes, meaning that the order is going to another line\n    //so also update all affectingOrders(orders that are in the original line and that are after this order)\n    if (isLineChanged(inputValues)) {\n      //save the order directly with removing its starttime and endtime to let the initialiser to init it again\n      //coz it is changing line, so just simply remove the start time and end time\n      updateWithRemoving(inputValues)\n    }else{\n      //save the order directly with changing its starttime and endtime\n      if (isDateChanged(inputValues)) {\n        updateWithRemoving(inputValues)\n      }else{\n        updateWithChanging(inputValues)\n      }\n    }\n  }\n}\n\nfunction updateOldAndNewOrders(inputValues){\n  const line = influx.writeLineForUpdate('Replaced', _rowData)\n  \n  utils.post(influx.writeUrl, line).then(res => {\n    //save the new order directly with removing its starttime and endtime to let the initialiser to init it again\n    //becuase this is the first\n    if (isLineChanged(inputValues)) {\n      updateWithRemoving(inputValues)\n    }else {\n      if (isDateChanged(inputValues)) {\n        updateWithRemoving(inputValues)\n      }else{\n        updateWithChanging(inputValues)\n      }\n    }\n  }).catch(e => {\n    closeForm()\n    utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n  })\n}\n\nfunction isDateChanged(inputValues){\n  return _rowData.order_date !== inputValues.date\n}\n\n/**\n * Take the user input, send request to change the current order to be what the user has entered in the edition form\n * It normally changes the current order's starttime and endtime because the order is being changed\n * @param {*} inputValues User input\n */\nfunction updateWithChanging(inputValues) {\n  const originalStartTime = _rowData.scheduled_start_datetime\n  //The difference between the original changeover and the edited changeover\n  const changeoverDiff = moment.duration(inputValues.changeover).subtract(moment.duration(_rowData.planned_changeover_time))\n  const startTime = moment(originalStartTime).add(changeoverDiff)\n  const duration = moment.duration(inputValues.orderQty / inputValues.plannedRate, 'hours')\n  const endTime = moment(originalStartTime).add(changeoverDiff).add(duration)\n\n  //calc the difference between the edited order's total duration and the original order's total duration\n  //so that all the affected orders know how many to add/subtract\n  const oldTotal = moment.duration(_rowData.order_qty / _rowData.planned_rate, 'hours').add(moment.duration(_rowData.planned_changeover_time))\n  const newTotal = duration.add(moment.duration(inputValues.changeover))\n  const difference = oldTotal.subtract(newTotal)\n  \n  const line = influx.writeLineForUpdateWithChangingTime(inputValues, _rowData.status, startTime.valueOf(), endTime.valueOf())\n  utils.post(influx.writeUrl, line).then(res => {\n    updateAffectedOrders(inputValues, difference)\n  }).catch(e => {\n    closeForm()\n    utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n  })\n}\n\n/**\n * Take the user input, send request to change the current order to be what the user has entered in the edition form\n * It will remove the order's start time and end time because it is changing line so that no order will be affected in the changing line\n * and so that the start time and end time can be removed, and then let the initialiser to init the time again.\n * @param {*} inputValues The user input\n */\nfunction updateWithRemoving(inputValues){\n  const line = influx.writeLineForUpdateWithRemovingTime(inputValues, _rowData ? _rowData.status : 'Planned')\n  \n  utils.post(influx.writeUrl, line).then(res => {\n    if (_ordersBeingAffected.length > 0) {\n      const difference = getDiff(inputValues)\n      updateAffectedOrders(inputValues, difference)\n    }else {\n      closeForm()\n      utils.alert('success', 'Successful', 'Order has been successfully updated')\n      tableCtrl.refreshDashboard()\n    }\n  }).catch(e => {\n    closeForm()\n    utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n  })\n}\n\n/**\n * Take the time difference, send request to add/subtract the time diff for all the affected orders due to -\n * the edited order being changed or removed from the current line and date\n * @param {*} inputValues The user input\n * @param {*} difference The time difference that all affected orders will need to add/subtract\n */\nfunction updateAffectedOrders(inputValues, difference) {\n  let promises = []\n  _ordersBeingAffected.forEach(order => {\n    const line = influx.writeLineForTimeUpdate(order, difference, 'subtract')\n    const prom = utils.post(influx.writeUrl, line)\n    promises.push(prom)\n  })\n  Promise.all(promises).then(res => {\n    closeForm()\n    utils.alert('success', 'Successful', 'Order has been successfully updated')\n    tableCtrl.refreshDashboard()\n  }).catch(e => {\n    closeForm()\n    utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n  })\n}\n\n/**\n * Take inputValues and find the qty and rate to calc the duration\n * then return duration + changeover duration\n * @param {*} inputValues User input for the form\n */\nfunction getDiff(inputValues){\n  let diff\n  const duration = moment.duration(inputValues.orderQty / inputValues.plannedRate, 'hours')\n  const changeover = moment.duration(inputValues.changeover, 'H:mm:ss')\n  diff = duration.add(changeover)\n  return diff\n}\n\nfunction isLineHavingSpareTimeForTheDay(allData, inputValues, rowData){\n    \n  //all orders in the targeting line (except the editing order itself (if line not changed))\n  let affectedOrders = allData.filter(order => order.production_line === inputValues.productionLine && order.order_date === inputValues.date)\n  affectedOrders = affectedOrders.filter(order => order.order_id !== rowData.order_id)\n\n  //find the line's default start time and then plus next day\n  const targetDayStartTime = moment(moment(inputValues.date, 'YYYY-MM-DD').format('YYYY-MM-DD') + ' ' + utils.getLineStartTime(rowData.production_line), 'YYYY-MM-DD H:mm:ss')\n  const targetDayStartTimeText = targetDayStartTime.format('YYYY-MM-DD H:mm:ss')\n  const nextDayStartTime = moment(targetDayStartTimeText, 'YYYY-MM-DD H:mm:ss').add(1, 'days')\n\n  //calc edited order's duration\n  const duration = moment.duration(inputValues.orderQty / inputValues.plannedRate, 'hours')\n  const changeover = moment.duration(inputValues.changeover, 'H:mm:ss')\n  const totalDur = duration.add(changeover)\n\n  //if no affected orders, see if target dat start time + totaldur <= nextdatstarttime\n  if (affectedOrders.length === 0) {\n    return targetDayStartTime.add(totalDur).isSameOrBefore(nextDayStartTime) \n  }\n\n  //get the max end time\n  const all_end_times = affectedOrders.map(order => order.scheduled_end_datetime)\n  const maxEndTime = moment(Math.max(...all_end_times)) \n  maxEndTime.add(totalDur)\n\n  return maxEndTime.isSameOrBefore(nextDayStartTime)\n}\n\n/**\n * get alldata and the user input to filter all affected orders.\n * These orders will be the ones that are in the original line with the same date.\n * @param {*} allData All the orders that is being passed in and displayed in this panel\n * @param {*} inputValues Inputs that the user entered in this order edition form\n */\nfunction getOrdersBeingAffect(allData, inputValues){\n  const ordersInOriginalLineAndDate = allData.filter(order => order.production_line === _rowData.production_line && order.order_date === _rowData.order_date)  \n  return ordersInOriginalLineAndDate.filter(order => {\n    let endTime = moment(inputValues.scheduled_end_datetime)\n    return order.scheduled_start_datetime >= endTime.valueOf()\n          && order.order_date === _rowData.order_date\n  })\n}\n\n/**\n * Expect the user inputs\n * Compare the user inputs and the globe scope var called 'rowData'\n * Check if the user inputs is different from the rowData to determine if the Tags are changed\n * @param {*} inputs \n */\nfunction hasTagsChanged(inputs) {\n  \n  if (!_rowData) {\n    //if there is no rowData, meaning that the user is creating a new order, so return false\n    return false\n  }\n  const product_id = inputs.product.split(' | ')[0]\n  const product_desc = inputs.product.split(' | ')[1]\n  return (\n    inputs.orderId !== _rowData.order_id \n    || product_id !== _rowData.product_id \n    || product_desc !== _rowData.product_desc\n  )\n}\n\n/**\n * Compares the user input and the original order to see if the line has been changed.\n * return true if it is.\n * @param {*} inputValues The user input\n */\nfunction isLineChanged(inputValues){\n  return inputValues.productionLine !== _rowData.production_line\n}\n\n/**\n * Expect the user inputs\n * Check if the user inputs are valid\n * Stop and prompt error if the inputs are not valid\n * @param {*} data \n */\nfunction isValueValid(data) {\n\n  const dateRegExp = new RegExp('^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$')\n  const prodList = products.reduce((arr, p) => {\n    const str = p.product_id + ' | ' + p.product_desc\n    arr.push(str)\n    return arr\n  }, [])\n\n  let productionLineList = equipment.reduce((arr, equ) => {\n    arr.push(equ.site + ' | ' + equ.area + ' | ' + equ.production_line)\n    return arr\n  }, [])  \n  productionLineList = utils.distinctElems(productionLineList)\n\n  if (data.orderId === '') {\n    utils.alert('warning', 'Warning', 'Order Number Empty, please enter the Order Number')\n    return false\n  }\n\n  if (data.orderQty === '') {\n    utils.alert('warning', 'Warning', 'Order Quantity Empty, please enter the Order Quantity')\n    return false\n  }\n\n  if (data.productionLine === '') {\n    utils.alert('warning', 'Warning', 'Production Line Empty, please enter the Production Line')\n    return false\n  }else {\n    if (productionLineList.indexOf(data.productionLine) === -1) {\n      utils.alert('warning', 'Warning', 'Production Line Not Exist, please select a Production Line from the Production Line List')\n      return false\n    }\n  }\n\n  if (data.product === '') {\n    utils.alert('warning', 'Warning', 'Product Empty, please enter the Product')\n    return false\n  }else {\n    if (prodList.indexOf(data.product) === -1) {\n      utils.alert('warning', 'Warning', 'Product Not Exist, please select a Product from the Product List')\n      return false\n    }\n  }\n\n  if (!dateRegExp.test(data.date)) {\n    utils.alert('warning', 'Warning', 'Scheduled Start Date Empty or Invalid Date Format, please choose a date from the date picker')\n    return false\n  }\n\n  if (data.plannedRate === '') {\n    utils.alert('warning', 'Warning', 'Planned Rate Empty, please enter the Planned Rate')\n    return false\n  }\n\n  return true\n}\n\nexport { showOrderEditingForm }\n"]}